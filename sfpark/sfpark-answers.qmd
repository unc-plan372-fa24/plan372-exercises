---
title: SFpark parking analysis
format: html
---

[SFpark](https://www.sfmta.com/projects/sfpark-pilot-program) is a parking demand management program in
San Francisco. The program adjusts prices at on-street and parking garages to try to keep a few spots
open in every block, to reduce circling for parking. We have data from SFpark-managed parking garages on the
number of entries and exits per day.

This is a [Quarto](https://quarto.org) document, which allows mixing R code, text, plots, and outputs into a single
document. Text is written in [Markdown](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax),
which is a simple text-based format for generating formatted documents. Quarto documents can then be "rendered"
to multiple formats—HTML, PDF, Word, etc. There are quite a few different ways you can format data. Some of the key ones are:

# Headings

A line that starts with 1-6 # characters is a heading. A single # is a Level 1 heading, two ## is a Level 2 heading (slightly smaller than a level 1), and so on.

Paragraphs are separated by two blank lines.

Italics can be inserted by surrounding text _with underscores_.

Bold is created by surrounding text with **double asterisks**.

Links are inserted with the [link](https://unc.edu) syntax—the text of the link is in square brackets, and the URL is in parentheses after that.

Bulleted lists are composed of lines starting with -, *, or +, e.g.

- This
- is
- a
- list

Numbered lists are similar but start with numbers followed by a period. The numbers do not need to be in order, Markdown will automatically re-number them.

1. This
1. is
1. a
1. numbered
1. list.

### Rendering Quarto

To "render" the document, click the "render" button above the editor in RStudio.

## Exploratory data analysis

Do some exploratory data analysis of the SFpark data
SFpark is the parking demand management program in San Francisco.
The data we're using are entries and exits from public parking
garages from 2011-2013, available from
https://www.sfmta.com/getting-around/drive-park/demand-responsive-pricing/sfpark-evaluation

### Load libraries

First, we need to load the libraries we will be using
If you get an error that a library was not found,
run `install.packages("tidyverse")`

We can create a "code cell" by starting it with triple backticks followed by {r}, to indicate that it is R-language code.

The `library()` _function_ in R loads the package that is its _argument_. `tidyverse` is a common package for data manipulation and plotting, which we'll use extensively in this course.

Run the code cell below either by clicking the "play" button or pressing Ctrl-shift-enter (PC) or Cmd-shift-enter (Mac).

```{r}
library(tidyverse)  # library for dealing with tabular data
library(lubridate)  # library for handling dates
```

### Load data

Next, we read our data into a table. The data are packaged as a CSV (comma separated values) file, which is
just a text file where each line is a row, and the columns are separated by commas.

The `here::here` function funds data relative to the current source file location. It will look for whatever git
repository contains the current Quarto/R file, then look in the "sfpark" folder inside that, the "data" folder inside that, and 
the "sfpark.csv" file inside that.

If you get an error that there is no package called `here`, run install.packages("here")

```{r}
data = read_csv(here::here("sfpark", "data", "sfpark.csv"))
```

### Familiarizing ourselves with the data

Now, lets look at the first few rows of our data to see what we're looking at
head means extract the first few rows (the head of the table) and all columns.
```{r}
head(data)
```

we have six columns:
- date: the date the data were recorded
- facility: the garage where the data were recorded
- district: the district (neighborhood) where the garage is
- usage_type: the type of payment (e.g. monthly pass, transient/hourly)
- entries, exits: the number of cars that entered and exited the garage that day that used that type of payment

We can look at which garages are in the data.

```{r}
unique(data$facility)
```

### Exercise: where in San Francisco are they (in which districts)?

```{r}
unique(data$district)
```

### In your own words, what does a row of the data represent?

One day of entries and exits of a particular usage type at a particular garage.

### How many cars enter a garage on an average day

```{r}
mean(data$entries)
```

### Exercise: That may be skewed by outliers. What is the median?

```{r}
median(data$entries)
```

## Grouped data analysis, aka split-apply-combine

Grouped data analysis is a very common pattern - rather than a mean
over the entire dataset, we may want a mean by groups. For instance,
the median being so different from the mean suggests outliers - perhaps
one very large garage. Let's look at the mean entries by garage. The code below first
_groups_ the data by garage, and then takes the mean number of entries in each group.

```{r}
data |>
  group_by(facility) |>
  summarize(mean_entries=mean(entries))
```

But this could be misleading. Does each row represent a single day at a single garage? What are we actually computing the mean of above?

We can use the group_by and summarize functions to create a dataset that shows _total_ entries and exits for each day, and create a new
table with this information. The summarize function leaves the data grouped by date, so we explicitly ungroup it to avoid confusion later on
(for instance, if we tried to do a calculation over the whole dataset, but it ended up happening within each group separately.)

```{r}
total_entries = data |>
  group_by(date, facility) |>
  summarize(entries=sum(entries), exits=sum(exits)) |>
  ungroup()
```

Now, we can look at the data we have now.

```{r}
head(total_entries)
```

### Exercise: calculate the mean entries by garage, using this new dataset

```{r}
total_entries |>
  group_by(facility) |>
  summarize(entries=mean(entries), exists=mean(exits))
```

### Filtering data

Maybe we don't want to look at the entire city, but only at garages
in the Civic Center neighborhood. We can filter the data and repeat
the above analysis.

```{r}
civic_center_data = data |> filter(district == "Civic Center")
```

### Exercise: repeat the above analysis to compute total entries by day, and take the daily average, using only data from Civic Center

```{r}
civic_center_total_entries = civic_center_data |>
  group_by(facility, date) |>
  summarize(entries=sum(entries), exits=sum(exits))

civic_center_total_entries |>
  group_by(facility) |>
  summarize(entries=mean(entries), exits=mean(exits)) 
```

### Repeat the process, looking only at garages in the Mission

```{r}
data |>
  filter(district == "Mission") |>
  group_by(facility, date) |>
  summarize(entries=sum(entries), exits=sum(exits)) |>
  # no need to ungroup since we are just going to group immediately
  group_by(facility) |>
  summarize(entries=mean(entries), exits=mean(exits)) |>
  ungroup()
```

### Working with dates

Another dimension of this dataset that we have not explored
is the date column. Before we can work with dates, however,
we have to parse the column.

Every column in a table has a type (for instance, integer,
decimal number, string). read_csv tries to guess the best
type for each field. We can see what types are used in our
table by printing the table to the console. The types are printed
just below the column names.

```{r}
total_entries
```

read_csv has read the date string as character
These columns only store the letters, and don't know that they represent dates. Before
we can use the dates, we need to parse the dates.
to parse dates, we will use the lubridate library: https://lubridate.tidyverse.org/

the mutate function will overwrite the date column

the mdy function parses dates in month/day/year format

```{r}
total_entries = total_entries |>
  mutate(date=mdy(date))
```

Next, we display the table again, to check the types.

```{r}
total_entries
```

Let's look at the mean entries by year, to look for trends over time
First, we need to extract the year from the date column, and assign it to a new
column. We previously used mutate for this; this line uses
$ notation which is another way of doing the same thing.

```{r}
total_entries$year = year(total_entries$date)
```

```{r}
# make sure it worked (note: any text after a $ sign within R code is ignored by R; this is called a comment)
unique(total_entries$year)
```

### Look at mean entries by garage and year

```{r}
total_entries |>
  group_by(facility, year) |>
  summarize(entries=mean(entries)) |>
  ungroup()
```

Ths table is in "long" format - one row for each
facility for each year. It would be easier to read in "wide" format:
one row for each facility and one column for each year. We can do this with the
pivot_wider function. the column names are taken from the field named in names_from,
and the values from the field named in values_from

```{r}
total_entries |>
  group_by(facility, year) |>
  summarize(entries=mean(entries)) |>
  ungroup() |>
  pivot_wider(names_from=year, values_from=entries)
```

### Exercise: repeat the above, but get the per-month mean rather than per year, to show seasonal trends

You should have a table with rows for each garage and columns for January, February, etc.

```{r}
total_entries$month = month(total_entries$date, label=T)

total_entries |>
  group_by(facility, month) |>
  summarize(entries=mean(entries)) |>
  ungroup() |>
  pivot_wider(names_from=month, values_from=entries)
```

### Weekdays vs weekends 

Some garages may be more popular on weekdays than on weekends. We need to repeat the above
analysis, but we want a mean for weekends and a mean for weekdays. Lubridate does not have a
weekend function, so we need to use the day of week function to make a new weekend column.
First, we can create a day of week column.

```{r}
total_entries$day_of_week = wday(total_entries$date, label=T)
```

### Look at how the days of week are abbreviated

```{r}
unique(total_entries$day_of_week)
```

### recode that to weekday/weekend
```{r}
total_entries$weekend = case_match(total_entries$day_of_week, "Mon"~"weekday", "Tue"~"weekday", "Wed"~"weekday", "Thu"~"weekday",
                               "Fri"~"weekday", "Sat"~"weekend", "Sun"~"weekend")
```

### Make sure that there are no missing values

is.na determines if a value is missing (NA), any determines if any value was found
to be missing by is.na, ! reverses the result, and stopifnot will stop program execution
and display an error if the input is not True

```{r}
stopifnot(!any(is.na(total_entries$weekend)))
```

### Calculate the means

```{r}
total_entries |>
  group_by(facility, weekend) |>
  summarize(entries=mean(entries)) |>
  ungroup() |>
  pivot_wider(names_from=weekend, values_from=entries)
```

### Exercise: compute means by season

```{r}
total_entries$month = month(total_entries$date, label=T)
total_entries$season = case_match(
  total_entries$month,
  "Jan" ~ "Winter",
  "Feb" ~ "Winter",
  "Mar" ~ "Winter",
  "Apr" ~ "Spring",
  "May" ~ "Spring",
  "Jun" ~ "Summer",
  "Jul" ~ "Summer",
  "Aug" ~ "Summer",
  "Sep" ~ "Fall",
  "Oct" ~ "Fall",
  "Nov" ~ "Fall",
  "Dec" ~ "Winter"
)
stopifnot(!any(is.na(total_entries$season)))

total_entries |>
  group_by(facility, season) |>
  summarize(entries=mean(entries)) |>
  ungroup() |>
  pivot_wider(names_from="season", values_from="entries")
```

## Plotting

This data would be more interesting if it were on a graph. To make graphs in R,
most people use the ggplot2 library, which is part of tidyverse.

### Create a dataset that shows how many entries to all garages there were on each day

```{r}
citywide_entries = total_entries |>
  group_by(date) |>
  summarize(entries=sum(entries)) |>
  ungroup()
```

### Create a plot using the total_entries table.

We define an "aesthetic" that the date will be the x axis, and the number of entries will be the y axis

```{r}
ggplot(citywide_entries, aes(x=date, y=entries)) +
  # and add a line plot to it
  geom_line()
```

wow, that's a mess - there's too much day-to-day variation to understand trends.
let's group the data by month and year, and plot again
the floor_date function returns the beginning of whatever period you put in - in this
case, the beginning of the month

```{r}
citywide_entries$month_year = floor_date(citywide_entries$date, unit="month")
monthly_entries = citywide_entries |>
  group_by(month_year) |>
  summarize(entries=sum(entries)) |>
  ungroup()

ggplot(monthly_entries, aes(x=month_year, y=entries)) +
  geom_line()
```

### What month has the highest parking demand? Why do you think that is?

### Plotting by garage

This is an interesting plot, but it would be more interesting to see it by garage.
We can do this by using data that is not summed up to citywide level, and then telling
ggplot to color by the facility.

```{r}
total_entries$year_month = floor_date(total_entries$date, unit="month")
garage_month_entries = total_entries |>
  group_by(facility, year_month) |>
  summarize(entries=sum(entries)) |>
  ungroup()
```

Look at the result of that call

```{r}
head(garage_month_entries)
```

### Plot the data but tell ggplot to use separate colors for each facility

```{r}
ggplot(garage_month_entries, aes(x=year_month, y=entries, group=facility, color=facility)) +
  geom_line()
```

### which garages have more of a seasonal trend? why?

### exercise: look at weekly trends rather than monthly trends

```{r}
total_entries$week = floor_date(total_entries$date, unit="week")
garage_week_entries = total_entries |>
    group_by(facility, week) |>
    summarize(entries=sum(entries)) |>
    ungroup()

garage_week_entries |>
  ggplot(aes(x=week, y=entries, color=facility)) +
    geom_line()
```

### exercise: group by district instead of by facility (more of a challenge!)

```{r}
# we previously parsed total_entries$date, now we need to do the same for data$date
# if we had parsed data$date before creating total_entries, we would not need to parse
# the dates twice.
data$date = mdy(data$date)
data$month_year =
  floor_date(data$date, unit="month")

district_month_entries = group_by(data, month_year, district) |>
  summarize(entries=sum(entries)) |>
  ungroup()

ggplot(district_month_entries, aes(x=month_year, y=entries, group=district, color=district)) +
  geom_line()
```

### Usage types

The data include several usage types - monthly passes, transient users, etc.

### Exercise

The data include several usage types - monthly passes, transient users, etc.
Exercise: first, extract all of the unique values of the usage_type column to
see what the possibilities are.
unique(data$usage_type)

How many entries are from each of the usage types? What usage type is most common?

```{r}
# we use a sum rather than a mean here, as the denominator of the mean will vary
# depending on how many garages offer that usage type
group_by(data, usage_type) |>
  summarize(sum(entries)) |>
  ungroup()
```

Are the patterns of usage types different on the weekdays vs. the weekends?

```{r}
# first, create a weekday/weekend column
data$day_of_week = wday(data$date, label=T)
data$weekend = case_match(data$day_of_week, "Mon"~"weekday", "Tue"~"weekday", "Wed"~"weekday", "Thu"~"weekday",
                               "Fri"~"weekday", "Sat"~"weekend", "Sun"~"weekend")
```

create a grouped data frame

```{r}
usage_types_weekday_weekend = group_by(data, usage_type, weekend) |>
  summarize(entries=sum(entries)) |>
  ungroup()
```

Print it out with pivot_wider. We see that "transient" is most popular both on
weekdays and weekends.

```{r}
pivot_wider(usage_types_weekday_weekend, names_from=weekend, values_from=entries)
```

It might be easier to look at a graph. I wanted to plot these as a grouped bar chart.
I wasn't sure how to do this, so I googled "bar plot grouped ggplot" and found
https://www.r-graph-gallery.com/48-grouped-barplot-with-ggplot2.html which gave
an example. The R community is large enough that there will often be someone who's
solved the same problem as you and written about it.

```{r}
ggplot(usage_types_weekday_weekend, aes(x=weekend, y=entries, fill=usage_type)) +
         geom_bar(stat="identity", position="dodge")
```

Make a plot of the monthly trend in number of entries by usage type.
Interestingly, the seasonal trend is really only present in the transient
usage type.

```{r}
monthly_usage_trend = group_by(data, usage_type, month_year) |>
  summarize(entries=sum(entries))
ggplot(monthly_usage_trend, aes(x=month_year, y=entries, group=usage_type, color=usage_type)) +
  geom_line()
```

## Render your document

Click "render" to create a rendered version with all outputs!

