---
title:  Residential building permits
---

Often we have multiple datasets that we want to analyze together. If there are column(s)
that match between the datasets, we can use a "join" to create a single dataset from
the two datasets. If the datasets have the same columns and represent different sets
of records, we can concatenate them.

The Census Bureau collects monthly information on the number of residential
building permits issued by county in the Building Permit Survey: https://www.census.gov/construction/bps/

In this exercise, we will use this data to evaluate how construction has trended
over time in different parts of the country. We have data from 2000-2021

We are also curious how a county's economic structure affects construction. The
USDA Economic Research Service publishes county typologies which reflect the economic
structure of every county in the US. We will use the 2004 data:
https://www.ers.usda.gov/data-products/county-typology-codes.aspx

## Load libraries

```{r}
library(tidyverse)
library(lubridate)
library(ggthemes)
```

## Load data

The data are in four files: three with building permit data (one per decade),
and one with the county typologies.

```{r}
permits_2000s = read_csv(here::here("residential_construction", "data", "res_permits_2000s.csv"))
permits_2010s = read_csv(here::here("residential_construction", "data", "res_permits_2010s.csv"))
permits_2020s = read_csv(here::here("residential_construction", "data", "res_permits_2020s.csv"))
county_types = read_csv(here::here("residential_construction", "data", "county_types.csv"))
```

We need to put together all of the permits files into a single table.
We want to put these together "vertically" - i.e. all the records for
the 2010s will be their own rows separate from the 2000s or 2020s
before we do this, we should check that the tables have the same format.

```{r}
head(permits_2000s)
head(permits_2010s)
head(permits_2020s)
```

Now that we've confirmed they have the same columns, we can use the bind_rows function to combine them (i.e. "binding" many rows into a single table).

```{r}
permits = bind_rows(permits_2000s, permits_2010s, permits_2020s)
```

Now we need to put together the permit data with county typologies. We don't want
to just add the county typologies to the end with bind_rows. We want to add the county
type to each row of this dataset. For this we need to do a join. We will use a left join,
because we don't want to lose any records from the permits dataset.

First, we need to evaluate which columns match between the two datasets

```{r}
head(county_types)
```

Now, we do a left join

```{r}
data = left_join(permits, county_types, by=c("state_fips", "county_fips"))
```

and look at the data to see if it worked

```{r}
head(data)
```

It's always a good idea to check and see if there is any missing data, due to
rows in the permits dataset that did not match rows in the county_types dataset

```{r}
sum(is.na(data$econdep))
```

see if we can figure out what's going on with these

```{r}
nas = filter(data, is.na(econdep))
unique(nas$county_name)
```

These look like they're not actually counties. see how much building is actually happening
in these places

```{r}
sum(nas$total_buildings)
sum(data$total_buildings)
```

This is not very many buildings. We can just remove them for this analysis

```{r}
data = filter(data, !is.na(econdep))
```

The data are split by the number of units in the structure. Create a total units
variable

```{r}
data = mutate(data, total_units = units_1unit + units_2unit + units_3or4unit + units_5plusunit)
```

### Exercise: make a plot of monthly and annual new construction, by economic typology (econdep columns).

This will require using lubridate to parse the
survey_date field, as well as group_by, summarize, and ggplot.

#### Monthly plot:

```{r}
# answer:
data$survey_date = ym(data$survey_date)

# monthly plot - we don't need to use floor_date because data is already monthly
# (but it wouldn't hurt)
monthly_new_construction = group_by(data, econdep, survey_date) |>
  summarize(total_units=sum(total_units))

ggplot(monthly_new_construction, aes(x=survey_date, y=total_units, group=econdep, color=econdep)) +
  geom_line()
```

#### Annual plot

```{r}
# answer:
data$year = year(data$survey_date)
yearly_new_construction = group_by(data, econdep, year) |>
  summarize(total_units=sum(total_units))
ggplot(yearly_new_construction, aes(x=year, y=total_units, group=econdep, color=econdep)) +
  geom_line()
```

Think about how this plot might be misleading.

Let's scale by total number of housing units. This is available in the housing_units.csv,
from the 2000 Census.

### Exercise: read that file and use a left join to join it to the data

```{r}
# answer:
housing_units = read_csv(here::here("residential_construction", "data", "housing_units.csv"))
data = left_join(data, housing_units, by=c("state_fips", "county_fips"))
```

Now, make those plots again, but scaled by total housing units

#### Monthly plot:

```{r}
# answer:
monthly_new_construction = group_by(data, econdep, survey_date) |>
  summarize(total_units=sum(total_units) / sum(total_housing_units))

ggplot(monthly_new_construction, aes(x=survey_date, y=total_units, group=econdep, color=econdep)) +
  geom_line()
```

#### Annual plot:

```{r}
# answer:
data$year = year(data$survey_date)
yearly_new_construction = group_by(data, econdep, year) |>
  summarize(total_units=sum(total_units) / sum(total_housing_units))
ggplot(yearly_new_construction, aes(x=year, y=total_units, group=econdep, color=econdep)) +
  geom_line()
```

### Exercise: Why does the "service" line get cut off?

```{r}
# answer
sum(is.na(data$total_housing_units))
```

Figure out which county is causing the problem, and look it up on Wikipedia to find out why
Hint: it's in Colorado. You can figure this out by looking at the state_fips field, and then
using the lookup table at https://www.nrcs.usda.gov/wps/portal/nrcs/detail/?cid=nrcs143_013696
to see that FIPS code 08 is Colorado.

```{r}
# answer:
nas = filter(data, is.na(total_housing_units))
unique(nas$county_name)
unique(nas$state_fips)
```

Remove the NAs from the analysis

```{r}
# answer:
data = filter(data, !is.na(total_housing_units))
```

### Exercise: recreate the plots

#### Monthly plot:

```{r}
# answer:
monthly_new_construction = group_by(data, econdep, survey_date) |>
  summarize(total_units=sum(total_units) / sum(total_housing_units))

ggplot(monthly_new_construction, aes(x=survey_date, y=total_units, group=econdep, color=econdep)) +
  geom_line()
```

#### Annual plot:

```{r}
# answer:
data$year = year(data$survey_date)
yearly_new_construction = group_by(data, econdep, year) |>
  summarize(total_units=sum(total_units) / sum(total_housing_units))
ggplot(yearly_new_construction, aes(x=year, y=total_units, group=econdep, color=econdep)) +
  geom_line()
```

Do these plots tell a different story than the unscaled plots?
